/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : PDDL.g
 *     -                            On : 2016-09-26 11:44:47
 *     -                for the parser : PDDLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
PDDLParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pPDDLParser, which is returned from a call to PDDLParserNew().
 *
 * The methods in pPDDLParser are  as follows:
 *
 *  - 
 PDDLParser_pddlDoc_return
      pPDDLParser->pddlDoc(pPDDLParser)
 *  - 
 PDDLParser_domain_return
      pPDDLParser->domain(pPDDLParser)
 *  - 
 PDDLParser_domainName_return
      pPDDLParser->domainName(pPDDLParser)
 *  - 
 PDDLParser_requireDef_return
      pPDDLParser->requireDef(pPDDLParser)
 *  - 
 PDDLParser_typesDef_return
      pPDDLParser->typesDef(pPDDLParser)
 *  - 
 PDDLParser_typedNameList_return
      pPDDLParser->typedNameList(pPDDLParser)
 *  - 
 PDDLParser_singleTypeNameList_return
      pPDDLParser->singleTypeNameList(pPDDLParser)
 *  - 
 PDDLParser_type_return
      pPDDLParser->type(pPDDLParser)
 *  - 
 PDDLParser_primType_return
      pPDDLParser->primType(pPDDLParser)
 *  - 
 PDDLParser_functionsDef_return
      pPDDLParser->functionsDef(pPDDLParser)
 *  - 
 PDDLParser_functionList_return
      pPDDLParser->functionList(pPDDLParser)
 *  - 
 PDDLParser_atomicFunctionSkeleton_return
      pPDDLParser->atomicFunctionSkeleton(pPDDLParser)
 *  - 
 PDDLParser_functionSymbol_return
      pPDDLParser->functionSymbol(pPDDLParser)
 *  - 
 PDDLParser_functionType_return
      pPDDLParser->functionType(pPDDLParser)
 *  - 
 PDDLParser_constantsDef_return
      pPDDLParser->constantsDef(pPDDLParser)
 *  - 
 PDDLParser_predicatesDef_return
      pPDDLParser->predicatesDef(pPDDLParser)
 *  - 
 PDDLParser_atomicFormulaSkeleton_return
      pPDDLParser->atomicFormulaSkeleton(pPDDLParser)
 *  - 
 PDDLParser_predicate_return
      pPDDLParser->predicate(pPDDLParser)
 *  - 
 PDDLParser_typedVariableList_return
      pPDDLParser->typedVariableList(pPDDLParser)
 *  - 
 PDDLParser_singleTypeVarList_return
      pPDDLParser->singleTypeVarList(pPDDLParser)
 *  - 
 PDDLParser_constraints_return
      pPDDLParser->constraints(pPDDLParser)
 *  - 
 PDDLParser_structureDef_return
      pPDDLParser->structureDef(pPDDLParser)
 *  - 
 PDDLParser_actionDef_return
      pPDDLParser->actionDef(pPDDLParser)
 *  - 
 PDDLParser_actionSymbol_return
      pPDDLParser->actionSymbol(pPDDLParser)
 *  - 
 PDDLParser_actionDefBody_return
      pPDDLParser->actionDefBody(pPDDLParser)
 *  - 
 PDDLParser_goalDesc_return
      pPDDLParser->goalDesc(pPDDLParser)
 *  - 
 PDDLParser_fComp_return
      pPDDLParser->fComp(pPDDLParser)
 *  - 
 PDDLParser_atomicTermFormula_return
      pPDDLParser->atomicTermFormula(pPDDLParser)
 *  - 
 PDDLParser_term_return
      pPDDLParser->term(pPDDLParser)
 *  - 
 PDDLParser_constraintDef_return
      pPDDLParser->constraintDef(pPDDLParser)
 *  - 
 PDDLParser_durativeActionDef_return
      pPDDLParser->durativeActionDef(pPDDLParser)
 *  - 
 PDDLParser_daDefBody_return
      pPDDLParser->daDefBody(pPDDLParser)
 *  - 
 PDDLParser_daGD_return
      pPDDLParser->daGD(pPDDLParser)
 *  - 
 PDDLParser_prefTimedGD_return
      pPDDLParser->prefTimedGD(pPDDLParser)
 *  - 
 PDDLParser_timedGD_return
      pPDDLParser->timedGD(pPDDLParser)
 *  - 
 PDDLParser_timeSpecifier_return
      pPDDLParser->timeSpecifier(pPDDLParser)
 *  - 
 PDDLParser_interval_return
      pPDDLParser->interval(pPDDLParser)
 *  - 
 PDDLParser_derivedDef_return
      pPDDLParser->derivedDef(pPDDLParser)
 *  - 
 PDDLParser_fExp_return
      pPDDLParser->fExp(pPDDLParser)
 *  - 
 PDDLParser_fExp2_return
      pPDDLParser->fExp2(pPDDLParser)
 *  - 
 PDDLParser_fHead_return
      pPDDLParser->fHead(pPDDLParser)
 *  - 
 PDDLParser_effect_return
      pPDDLParser->effect(pPDDLParser)
 *  - 
 PDDLParser_cEffect_return
      pPDDLParser->cEffect(pPDDLParser)
 *  - 
 PDDLParser_pEffect_return
      pPDDLParser->pEffect(pPDDLParser)
 *  - 
 PDDLParser_condEffect_return
      pPDDLParser->condEffect(pPDDLParser)
 *  - 
 PDDLParser_binaryOp_return
      pPDDLParser->binaryOp(pPDDLParser)
 *  - 
 PDDLParser_binaryComp_return
      pPDDLParser->binaryComp(pPDDLParser)
 *  - 
 PDDLParser_assignOp_return
      pPDDLParser->assignOp(pPDDLParser)
 *  - 
 PDDLParser_durationConstraint_return
      pPDDLParser->durationConstraint(pPDDLParser)
 *  - 
 PDDLParser_simpleDurationConstraint_return
      pPDDLParser->simpleDurationConstraint(pPDDLParser)
 *  - 
 PDDLParser_durOp_return
      pPDDLParser->durOp(pPDDLParser)
 *  - 
 PDDLParser_durValue_return
      pPDDLParser->durValue(pPDDLParser)
 *  - 
 PDDLParser_daEffect_return
      pPDDLParser->daEffect(pPDDLParser)
 *  - 
 PDDLParser_timedEffect_return
      pPDDLParser->timedEffect(pPDDLParser)
 *  - 
 PDDLParser_fAssignDA_return
      pPDDLParser->fAssignDA(pPDDLParser)
 *  - 
 PDDLParser_fExpDA_return
      pPDDLParser->fExpDA(pPDDLParser)
 *  - 
 PDDLParser_problem_return
      pPDDLParser->problem(pPDDLParser)
 *  - 
 PDDLParser_problemDecl_return
      pPDDLParser->problemDecl(pPDDLParser)
 *  - 
 PDDLParser_problemDomain_return
      pPDDLParser->problemDomain(pPDDLParser)
 *  - 
 PDDLParser_objectDecl_return
      pPDDLParser->objectDecl(pPDDLParser)
 *  - 
 PDDLParser_init_return
      pPDDLParser->init(pPDDLParser)
 *  - 
 PDDLParser_initEl_return
      pPDDLParser->initEl(pPDDLParser)
 *  - 
 PDDLParser_nameLiteral_return
      pPDDLParser->nameLiteral(pPDDLParser)
 *  - 
 PDDLParser_atomicNameFormula_return
      pPDDLParser->atomicNameFormula(pPDDLParser)
 *  - 
 PDDLParser_goal_return
      pPDDLParser->goal(pPDDLParser)
 *  - 
 PDDLParser_probConstraints_return
      pPDDLParser->probConstraints(pPDDLParser)
 *  - 
 PDDLParser_prefConGD_return
      pPDDLParser->prefConGD(pPDDLParser)
 *  - 
 PDDLParser_metricSpec_return
      pPDDLParser->metricSpec(pPDDLParser)
 *  - 
 PDDLParser_optimization_return
      pPDDLParser->optimization(pPDDLParser)
 *  - 
 PDDLParser_metricFExp_return
      pPDDLParser->metricFExp(pPDDLParser)
 *  - 
 PDDLParser_conGD_return
      pPDDLParser->conGD(pPDDLParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_PDDLParser_H
#define _PDDLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct PDDLParser_Ctx_struct PDDLParser, * pPDDLParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct PDDLParser_pddlDoc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_pddlDoc_return;



typedef struct PDDLParser_domain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_domain_return;



typedef struct PDDLParser_domainName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_domainName_return;



typedef struct PDDLParser_requireDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_requireDef_return;



typedef struct PDDLParser_typesDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_typesDef_return;



typedef struct PDDLParser_typedNameList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_typedNameList_return;



typedef struct PDDLParser_singleTypeNameList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_singleTypeNameList_return;



typedef struct PDDLParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_type_return;



typedef struct PDDLParser_primType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_primType_return;



typedef struct PDDLParser_functionsDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_functionsDef_return;



typedef struct PDDLParser_functionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_functionList_return;



typedef struct PDDLParser_atomicFunctionSkeleton_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_atomicFunctionSkeleton_return;



typedef struct PDDLParser_functionSymbol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_functionSymbol_return;



typedef struct PDDLParser_functionType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_functionType_return;



typedef struct PDDLParser_constantsDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_constantsDef_return;



typedef struct PDDLParser_predicatesDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_predicatesDef_return;



typedef struct PDDLParser_atomicFormulaSkeleton_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_atomicFormulaSkeleton_return;



typedef struct PDDLParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_predicate_return;



typedef struct PDDLParser_typedVariableList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_typedVariableList_return;



typedef struct PDDLParser_singleTypeVarList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_singleTypeVarList_return;



typedef struct PDDLParser_constraints_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_constraints_return;



typedef struct PDDLParser_structureDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_structureDef_return;



typedef struct PDDLParser_actionDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_actionDef_return;



typedef struct PDDLParser_actionSymbol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_actionSymbol_return;



typedef struct PDDLParser_actionDefBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_actionDefBody_return;



typedef struct PDDLParser_goalDesc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_goalDesc_return;



typedef struct PDDLParser_fComp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_fComp_return;



typedef struct PDDLParser_atomicTermFormula_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_atomicTermFormula_return;



typedef struct PDDLParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_term_return;



typedef struct PDDLParser_constraintDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_constraintDef_return;



typedef struct PDDLParser_durativeActionDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_durativeActionDef_return;



typedef struct PDDLParser_daDefBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_daDefBody_return;



typedef struct PDDLParser_daGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_daGD_return;



typedef struct PDDLParser_prefTimedGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_prefTimedGD_return;



typedef struct PDDLParser_timedGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_timedGD_return;



typedef struct PDDLParser_timeSpecifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_timeSpecifier_return;



typedef struct PDDLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_interval_return;



typedef struct PDDLParser_derivedDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_derivedDef_return;



typedef struct PDDLParser_fExp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_fExp_return;



typedef struct PDDLParser_fExp2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_fExp2_return;



typedef struct PDDLParser_fHead_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_fHead_return;



typedef struct PDDLParser_effect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_effect_return;



typedef struct PDDLParser_cEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_cEffect_return;



typedef struct PDDLParser_pEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_pEffect_return;



typedef struct PDDLParser_condEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_condEffect_return;



typedef struct PDDLParser_binaryOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_binaryOp_return;



typedef struct PDDLParser_binaryComp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_binaryComp_return;



typedef struct PDDLParser_assignOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_assignOp_return;



typedef struct PDDLParser_durationConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_durationConstraint_return;



typedef struct PDDLParser_simpleDurationConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_simpleDurationConstraint_return;



typedef struct PDDLParser_durOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_durOp_return;



typedef struct PDDLParser_durValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_durValue_return;



typedef struct PDDLParser_daEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_daEffect_return;



typedef struct PDDLParser_timedEffect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_timedEffect_return;



typedef struct PDDLParser_fAssignDA_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_fAssignDA_return;



typedef struct PDDLParser_fExpDA_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_fExpDA_return;



typedef struct PDDLParser_problem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_problem_return;



typedef struct PDDLParser_problemDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_problemDecl_return;



typedef struct PDDLParser_problemDomain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_problemDomain_return;



typedef struct PDDLParser_objectDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_objectDecl_return;



typedef struct PDDLParser_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_init_return;



typedef struct PDDLParser_initEl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_initEl_return;



typedef struct PDDLParser_nameLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_nameLiteral_return;



typedef struct PDDLParser_atomicNameFormula_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_atomicNameFormula_return;



typedef struct PDDLParser_goal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_goal_return;



typedef struct PDDLParser_probConstraints_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_probConstraints_return;



typedef struct PDDLParser_prefConGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_prefConGD_return;



typedef struct PDDLParser_metricSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_metricSpec_return;



typedef struct PDDLParser_optimization_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_optimization_return;



typedef struct PDDLParser_metricFExp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_metricFExp_return;



typedef struct PDDLParser_conGD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    PDDLParser_conGD_return;




/** Context tracking structure for 
PDDLParser

 */
struct PDDLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     PDDLParser_pddlDoc_return
     (*pddlDoc)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_domain_return
     (*domain)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_domainName_return
     (*domainName)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_requireDef_return
     (*requireDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_typesDef_return
     (*typesDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_typedNameList_return
     (*typedNameList)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_singleTypeNameList_return
     (*singleTypeNameList)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_type_return
     (*type)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_primType_return
     (*primType)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_functionsDef_return
     (*functionsDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_functionList_return
     (*functionList)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_atomicFunctionSkeleton_return
     (*atomicFunctionSkeleton)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_functionSymbol_return
     (*functionSymbol)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_functionType_return
     (*functionType)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_constantsDef_return
     (*constantsDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_predicatesDef_return
     (*predicatesDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_atomicFormulaSkeleton_return
     (*atomicFormulaSkeleton)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_predicate_return
     (*predicate)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_typedVariableList_return
     (*typedVariableList)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_singleTypeVarList_return
     (*singleTypeVarList)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_constraints_return
     (*constraints)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_structureDef_return
     (*structureDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_actionDef_return
     (*actionDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_actionSymbol_return
     (*actionSymbol)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_actionDefBody_return
     (*actionDefBody)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_goalDesc_return
     (*goalDesc)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_fComp_return
     (*fComp)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_atomicTermFormula_return
     (*atomicTermFormula)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_term_return
     (*term)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_constraintDef_return
     (*constraintDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_durativeActionDef_return
     (*durativeActionDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_daDefBody_return
     (*daDefBody)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_daGD_return
     (*daGD)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_prefTimedGD_return
     (*prefTimedGD)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_timedGD_return
     (*timedGD)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_timeSpecifier_return
     (*timeSpecifier)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_interval_return
     (*interval)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_derivedDef_return
     (*derivedDef)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_fExp_return
     (*fExp)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_fExp2_return
     (*fExp2)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_fHead_return
     (*fHead)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_effect_return
     (*effect)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_cEffect_return
     (*cEffect)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_pEffect_return
     (*pEffect)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_condEffect_return
     (*condEffect)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_binaryOp_return
     (*binaryOp)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_binaryComp_return
     (*binaryComp)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_assignOp_return
     (*assignOp)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_durationConstraint_return
     (*durationConstraint)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_simpleDurationConstraint_return
     (*simpleDurationConstraint)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_durOp_return
     (*durOp)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_durValue_return
     (*durValue)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_daEffect_return
     (*daEffect)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_timedEffect_return
     (*timedEffect)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_fAssignDA_return
     (*fAssignDA)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_fExpDA_return
     (*fExpDA)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_problem_return
     (*problem)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_problemDecl_return
     (*problemDecl)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_problemDomain_return
     (*problemDomain)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_objectDecl_return
     (*objectDecl)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_init_return
     (*init)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_initEl_return
     (*initEl)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_nameLiteral_return
     (*nameLiteral)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_atomicNameFormula_return
     (*atomicNameFormula)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_goal_return
     (*goal)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_probConstraints_return
     (*probConstraints)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_prefConGD_return
     (*prefConGD)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_metricSpec_return
     (*metricSpec)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_optimization_return
     (*optimization)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_metricFExp_return
     (*metricFExp)	(struct PDDLParser_Ctx_struct * ctx);

     PDDLParser_conGD_return
     (*conGD)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred17_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred58_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred59_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred60_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred87_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred89_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred90_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred91_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred92_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred93_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred94_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred106_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred107_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred109_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred111_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred114_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred115_PDDL)	(struct PDDLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred118_PDDL)	(struct PDDLParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct PDDLParser_Ctx_struct * ctx);
    void	    (*free)   (struct PDDLParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pPDDLParser PDDLParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pPDDLParser PDDLParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define ACTION      4
#define AND_EFFECT      5
#define AND_GD      6
#define ANY_CHAR      7
#define ASSIGN_EFFECT      8
#define BINARY_OP      9
#define COMPARISON_GD      10
#define CONSTANTS      11
#define CONSTRAINT      12
#define DIGIT      13
#define DOMAIN      14
#define DOMAIN_NAME      15
#define DURATIVE_ACTION      16
#define EFFECT      17
#define EITHER_TYPE      18
#define EXISTS_GD      19
#define FORALL_EFFECT      20
#define FORALL_GD      21
#define FUNCTIONS      22
#define FUNC_HEAD      23
#define GOAL      24
#define IMPLY_GD      25
#define INIT      26
#define INIT_AT      27
#define INIT_EQ      28
#define LETTER      29
#define LINE_COMMENT      30
#define NAME      31
#define NOT_EFFECT      32
#define NOT_GD      33
#define NOT_PRED_INIT      34
#define NUMBER      35
#define OBJECTS      36
#define OR_GD      37
#define PRECONDITION      38
#define PREDICATES      39
#define PRED_HEAD      40
#define PRED_INST      41
#define PROBLEM      42
#define PROBLEM_CONSTRAINT      43
#define PROBLEM_DOMAIN      44
#define PROBLEM_METRIC      45
#define PROBLEM_NAME      46
#define REQUIREMENTS      47
#define REQUIRE_KEY      48
#define TYPES      49
#define UNARY_MINUS      50
#define VARIABLE      51
#define WHEN_EFFECT      52
#define WHITESPACE      53
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for PDDLParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
